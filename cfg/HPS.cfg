#!/usr/bin/env python
PACKAGE = "hps_camera"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# DEBUG
# gen.add("debugMode",    bool_t,   0, "Debug mode",  False)

# HDR config mode
hdr_mode = gen.enum([ gen.const(   "HDR_DISABLE",      int_t, 0, "HDR is not enabled, manually set / get integration time"),
           gen.const(              "AUTO_HDR",         int_t, 1, "Auto HDR, Set/Acquire Exposure Amplitude/Overexposure Amplitude/Signal Weak Amplitude/Signal Weak Amplitude"),
           gen.const(              "SUPER_HDR",        int_t, 2, "Super HDR, set/get composite frame number / maximum integration time"),
           gen.const(              "SIMPLE_HDR",       int_t, 3, "Simple HDR, set/get maximum/minimum integration time")],
           "HDR mode selection")
gen.add("hdrConfHdrMode",                   int_t,    0, "HDR mode selection", 0, 0, 3, edit_method=hdr_mode)
gen.add("hdrConfQualityOverexposed",        double_t, 0, "AUTO_HDR exposure amplitude",         500., 0,   1000.)
gen.add("hdrConfQualityOverexposedSerious", double_t, 0, "AUTO_HDR overexposure assignment",    800., 0,   1000.)
gen.add("hdrConfQualityWeak",               double_t, 0, "AUTO_HDR signal weak amplitude",      120., 0,   1000.)
gen.add("hdrConfQualityWeakSerious",        double_t, 0, "AUTO_HDR signal is extremely weak amplitude",    80., 0,   1000.)
gen.add("hdrConfSimpleHdrMaxIntegration",   int_t, 0, "SIMPLE_HDR maximum integration time us",     2000, 0,   10000)
gen.add("hdrConfSimpleHdrMinIntegration",   int_t, 0, "SIMPLE_HDR minimum integration time us",     200, 0,   10000)
gen.add("hdrConfSuperHdrFrameNumber",       int_t, 0, "SUPER_HDR composite frame number",           200, 0,   10000)
gen.add("hdrConfSuperHdrMaxIntegration",    int_t, 0, "SUPER_HDR maximum integration time us",      2000, 0,   10000)
gen.add("hdrConfHdrDisableIntegrationTime", int_t, 0, "HDR_DISABLE manual integration time us",     200, 0,   10000)

# Distance filter mode
d_filter_mode = gen.enum([ gen.const(   "DISABLE",       int_t, 0, "Distance filter off"),
                gen.const(              "SIMPLE_KALMAN", int_t, 1, "Simple Kalman filter")],
                "HDR mode selection")
gen.add("distanceFilterConfFilterType",        int_t,      0, "Distance filter selection", 0, 0, 1, edit_method=d_filter_mode)
gen.add("distanceFilterConfKalmanK",           double_t,   0, "Simple Kalman filter scale factor",    0.3, 0,   100.)
gen.add("distanceFilterConfKalmanThreshold",   int_t,      0, "Noise threshold",    200, 0,   1000)
gen.add("distanceFilterConfNumCheck",          int_t,      0, "Threshold check frame number",    2, 0,   100)

# Smooth filter mode
smooth_filter_mode = gen.enum([ gen.const(   "SMOOTH_FILTER_DISABLE",       int_t, 0, "Smoothing filter off"),
                     gen.const(              "SMOOTH_FILTER_AVERAGE",       int_t, 1, "Mean filter"),
                     gen.const(              "SMOOTH_FILTER_GAUSS",         int_t, 2, "Gaussian filter")],
                     "Type of smoothing filter")
gen.add("smoothFilterConfType",       int_t,      0, "Type of smoothing filter", 0, 0, 1, edit_method=smooth_filter_mode)
gen.add("smoothFilterConfArg1",       int_t,      0, "Filtering parameter",      0, 0, 10000)

# Mounting angle
gen.add("mountingAngleParamConfEnable",         bool_t,   0, "Mounting angle",  False)
gen.add("mountingAngleParamConfAngleVertical",  int_t,    0, "Vertical installation angle in deg: the angle between the main optical axis and the ground perpendicular",    0, 0,   360)
gen.add("mountingAngleParamConfHeight",         int_t,    0, "Mounting height relative to the ground(mm)",    0, 0,   10000)

# distance offset
gen.add("distanceOffset",   int_t,     0, "Distance offset (mm?)",      0, 0, 10000)

# edge detection
gen.add("edgeDetectionEnable",                bool_t,   0, "Enable edge detection",  False)
gen.add("edgeDetectionThresholdValue",        int_t,    0, "Threshold",  0, 0, 10000)

# depth image
gen.add("depth_image_min",        int_t,    0, "Depth image min [mm]",  0, 0, 10000)
gen.add("depth_image_max",        int_t,    0, "Depth image max [mm]",  10000, 0, 10000)


exit(gen.generate(PACKAGE, "hps_camera", "HPS"))